#!/bin/bash

function ago() {
    local SEC_PER_MINUTE=$((60))
    local   SEC_PER_HOUR=$((60*60))
    local    SEC_PER_DAY=$((60*60*24))
    local  SEC_PER_MONTH=$((60*60*24*30))
    local   SEC_PER_YEAR=$((60*60*24*365))

    local last_unix="$(date --date="$1" +%s)"    # convert date to unix timestamp
    local now_unix="$(date +'%s')"

    local delta_s=$(( now_unix - last_unix ))

    if (( delta_s <  SEC_PER_MINUTE * 2))
    then
        echo ""$((delta_s))" seconds ago"
        return
    elif (( delta_s <  SEC_PER_HOUR * 2))
    then
        echo ""$((delta_s / SEC_PER_MINUTE))" minutes ago"
        return
    elif (( delta_s <  SEC_PER_DAY * 2))
    then
        echo ""$((delta_s / SEC_PER_HOUR))" hours ago"
        return
    elif (( delta_s <  SEC_PER_MONTH * 2))
    then
        echo ""$((delta_s / SEC_PER_DAY))" days ago"
        return
    elif (( delta_s <  SEC_PER_YEAR * 2))
    then
        echo ""$((delta_s / SEC_PER_MONTH))" months ago"
        return
    else
        echo ""$((delta_s / SEC_PER_YEAR))" years ago"
        return
    fi
}

print_style () {
    if [ "$2" == "info" ] ; then
        COLOR="96m";
    elif [ "$2" == "success" ] ; then
        COLOR="92m";
    elif [ "$2" == "warning" ] ; then
        COLOR="93m";
    elif [ "$2" == "danger" ] ; then
        COLOR="91m";
    else #default color
        COLOR="0m";
    fi

    STARTCOLOR="\e[$COLOR";
    ENDCOLOR="\e[0m";

    printf "$STARTCOLOR%b$ENDCOLOR" "$1";
}

usage() {
  key="$1"
  echo "Usage:"
	case $key in
		list)
			echo "${PROGRAM_NAME} [OPTIONS] list"
			;;
		interactive)
			echo "${PROGRAM_NAME} [OPTIONS] interactive"
			;;
    file)
			echo "${PROGRAM_NAME} [OPTIONS] file [SELECTION]"
			;;
		help|*)
		  echo "${PROGRAM_NAME} [COMMAND]"
			echo "  list            List available backups"
			echo "  interactive     Restore database backup with interactive input"
      echo "  file            Restore the specified backup file"
			;;
	esac
}

list() {
  local DIRECTORY=/scratch
  shopt -s globstar
  cd $DIRECTORY
  printf "%-3s %-20s %-45s %-15s" "#" "DB" "File" "Last Modified"
  echo
  printf "%-3s %-20s %-45s %-15s" "---" "--------------" "------------------------------" "-------------------------"
  echo
  local INDEX=0
  for backup in **/*.bak; do
    local NAME=$(export ACTION=names && export BACKUP_PATH=$DIRECTORY/$backup && script query -f /sql/restore.sql)
    local LAST_MODIFIED=$(date -r $backup)
    local AGO=$(ago "$LAST_MODIFIED")
    local DATE=$(date -d "$LAST_MODIFIED" +%Y-%m-%d)
    INDEX=$(expr $INDEX + 1)
    printf "%3s %-20s %-45s %-15s" "$INDEX)" $NAME "$backup" "$DATE($AGO)"
    echo
  done
}

# File of specified INDEX
pathOf() {
  local DIRECTORY=/scratch
  shopt -s globstar
  cd $DIRECTORY
  local SELECTION=$1
  local INDEX=1
  for backup in **/*.bak; do
    if [ $INDEX -eq $SELECTION ] ; then echo $DIRECTORY/$backup; fi
    INDEX=$(expr $INDEX + 1)
  done
}

# Db of specified INDEX
nameOf() {
  local SELECTION=$1
  local NAME=$(export ACTION=names && export BACKUP_PATH=$(pathOf $SELECTION) && script query -f /sql/restore.sql)
  echo $NAME
}

# Restore of specified INDEX
restore() {
  local SELECTION=$1
  (export ACTION=execute && export BACKUP_PATH=$(pathOf $SELECTION) && script exe -f /sql/restore.sql)
}

# Print selection
printSel() {
  local SELECTION=$1
  echo
  print_style "Restore Database: "
  print_style $(nameOf $SELECTION) "success"
  echo
  print_style "Backup: "
  print_style $(pathOf $SELECTION) "success"
  echo
  echo
}

count() {
  expr $(list | wc -l) - 2
}

interactive() {
  # No Backups
  if [ $(count) -eq 0 ]; then
      echo "No Backups Found.";
      exit 2;
  fi

  # One Backup
  if [ $(count) -eq 1 ]; then
    local SELECTION=1

    printSel $SELECTION
    restore $SELECTION

    echo
    echo
    echo "Restore Complete."
  fi

  # More Than One
  if [ $(count) -gt 1 ]; then
      list

      echo
      echo "Please pick a Backup to restore:"
      read SELECTION
      while [[ ! $SELECTION =~ ^-?[0-9]+$ ]] || ([ $SELECTION -lt 1 ] || [ $SELECTION -gt $(count) ])
      do
        echo
        echo "$SELECTION is not a valid selection."
        echo
        echo "Please pick a Backup to restore:"
        read SELECTION
      done

      printSel $SELECTION
      restore $SELECTION

      echo
      echo
      echo "Restore Complete."
  fi
}

file() {
  local SELECTION=$1
  if [[ ! $SELECTION =~ ^-?[0-9]+$ ]] || ([ $SELECTION -lt 1 ] || [ $SELECTION -gt $(count) ]) ; then
    echo
    echo "$SELECTION is not a valid selection."
    exit 2
  fi

  printSel $SELECTION
  restore $SELECTION

  echo
  echo
  echo "Restore Complete."
}


COMMAND="help"
if [[ $# > 0 ]] ; then	COMMAND=$1; fi
shift

case $COMMAND in
	list)	            list "$@" ;;
  interactive)      interactive "$@"  ;;
  file)             file "$@" ;;
	*)                usage $COMMAND ;;
esac

# list backups that can be restored
# interactive restore
# restore specified file
